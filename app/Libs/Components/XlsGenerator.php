<?php

namespace App\Libs\Components;

use Core\app\Utils\type;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;

class XlsGenerator
{
    /**
     * Funkcja generuje xls w locie bez zapisywania na dysku
     * @param type $rows - wiersze
     * @param type $headers - nazwy kolumn
     * @param type $filename - nazwa pliku bez koncowki .xlsx
     */
    public static function exportXLS($rows, $headers = [], $filename = '')
    {
        if (empty($filename)) {
            $filename = 'export_' . date('Ymdhis');
        }
        $objPHPExcel = new \PhpOffice\PhpSpreadsheet\Spreadsheet();

        $objPHPExcel->getProperties()->setCreator("DS MKT");
        $objPHPExcel->getProperties()->setLastModifiedBy("DS MKT");
        $objPHPExcel->getProperties()->setTitle("Export");
        $objPHPExcel->getProperties()->setSubject("Export");
        $objPHPExcel->getProperties()->setDescription("Generated by DS MKT.");

        if (!empty($headers)) {
            $firstRowRange = 'A1:' . self::columnLetter(count($headers ?? [])) . '1';
            $objPHPExcel->getActiveSheet()->setAutoFilter($firstRowRange);
        }

        if (!empty($headers)) {
            foreach ($headers as $key => $columnName) {
                $objPHPExcel->getActiveSheet()->setCellValue([$key + 1, 1], $columnName);
                $objPHPExcel->getActiveSheet()->getColumnDimensionByColumn($key + 1)->setAutoSize(true);
            }
            $row_index = 2;
        } else {
            $row_index = 1;
        }
        foreach ($rows as $row) {
            $objPHPExcel->setActiveSheetIndex(0);
            $column_index = 1;
            foreach ($row as $column_value) {
                $objPHPExcel->getActiveSheet()->setCellValue([$column_index, $row_index], $column_value);
                $objPHPExcel->getActiveSheet()->getColumnDimensionByColumn($column_index)->setAutoSize(true);
                $column_index++;
            }
            $row_index++;
        }

        $objWriter = \PhpOffice\PhpSpreadsheet\IOFactory::createWriter($objPHPExcel, 'Xlsx');

        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
        header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
        header('Pragma: public'); // HTTP/1.0

        $objWriter->save('php://output');
        exit();
    }

    public static function exportMultipleSheets($inputData, $filename = '', $dropdownLists = [], $download = true, $savePath = '')
    {
        if (empty($inputData)) {
            return null;
        }

        if (empty($filename)) {
            $filename = 'export_' . date('Ymdhis');
        }
        $objPHPExcel = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
        $objPHPExcel->getProperties()->setCreator("DS MKT");
        $objPHPExcel->getProperties()->setLastModifiedBy("DS MKT");
        $objPHPExcel->getProperties()->setTitle("Export");
        $objPHPExcel->getProperties()->setSubject("Export");
        $objPHPExcel->getProperties()->setDescription("Generated by DS MKT.");

        $sheetKey = 0;
        foreach ($inputData as $sheetName => $sheetData) {
            $objPHPExcel->setActiveSheetIndex($sheetKey);
            $objPHPExcel->getActiveSheet()->setTitle($sheetName);

            if (!empty($sheetData['headers'] ?? [])) {
                $firstRowRange = 'A1:' . self::columnLetter(count($sheetData['headers'] ?? [])) . '1';
                $objPHPExcel->getActiveSheet()->setAutoFilter($firstRowRange);
            }

            if (!empty($sheetData['headers'] ?? [])) {
                foreach ($sheetData['headers'] as $key => $columnName) {
                    $objPHPExcel->getActiveSheet()->setCellValue([$key + 1, 1], $columnName);
                    $objPHPExcel->getActiveSheet()->getColumnDimensionByColumn($key + 1)->setAutoSize(true);
                }
                $row_index = 2;
            } else {
                $row_index = 1;
            }
            if (!empty($sheetData['rows'] ?? [])) {
                foreach ($sheetData['rows'] as $row) {
                    $column_index = 1;
                    foreach ($row as $column_value) {
                        $activeSheet = $objPHPExcel->getActiveSheet();
                        $activeSheet->setCellValue([$column_index, $row_index], $column_value);
                        $activeSheet->getColumnDimensionByColumn($column_index)->setAutoSize(true);
                        $column_index++;
                    }
                    $row_index++;
                }
            }
            $sheetKey++;
            if ($sheetKey != count($inputData)) {
                $objPHPExcel->createSheet();
            }
        }

        if (!empty($dropdownLists)) {
            foreach ($dropdownLists as $config) {
                $activeSheet = $objPHPExcel->setActiveSheetIndexByName($config['set_sheet_name']);
                for ($i = 2; $i <= 200; $i++) {
                    $dropdownList = $activeSheet->getCell([$config['set_column_index'], $i])->getDataValidation();
                    $dropdownList->setType(\PhpOffice\PhpSpreadsheet\Cell\DataValidation::TYPE_LIST)
                        ->setAllowBlank(true)
                        ->setShowDropDown(true)
                        ->setPrompt('Wybierz')
                        ->setFormula1('=\'' . $config['get_sheet_name'] . '\'!$' . $config['get_column_letter'] . '$2:$' . $config['get_column_letter'] . '$' . ($config['limit_rows'] ?? 200));
                }
            }
        }

        $objWriter = \PhpOffice\PhpSpreadsheet\IOFactory::createWriter($objPHPExcel, 'Xlsx');
        if($download){
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
            header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
            header('Pragma: public'); // HTTP/1.0
            $objWriter->save('php://output');
            exit();
        }else{
            $objWriter->save($savePath.'/'.$filename.'.xlsx');
            return $savePath.'/'.$filename.'.xlsx';
        }
    }

    public static function columnLetter($c)
    {
        $c = intval($c);
        if ($c <= 0) {
            return '';
        }

        $letter = '';

        while ($c != 0) {
            $p = ($c - 1) % 26;
            $c = intval(($c - $p) / 26);
            $letter = chr(65 + $p) . $letter;
        }

        return $letter;

    }
}
